Parameters:
  InfrastructureStackName:
    Description: Name of the base infrastructure stack
    Type: String
    Default: ai-vpc-infra-stack
  DBPass:
    Type: String
    Default: "admin123"
  Region:
    Type: String
    Default: 'us-east-2'

AWSTemplateFormatVersion: '2010-09-09'
Description: "VM and DB stack provisioning"
Resources:
  BackendLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: BackendLaunchTemplate
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: '/dev/sda1'
            Ebs:
              VolumeSize: 8 # in GB
        ImageId: 'ami-089a545a9ed9893b6' # Amazon Linux 2 AMI (64-bit x86)
        InstanceType: 't2.micro'  #  free tier eligible
        KeyName: 'Demo-Test-Key-Pair' # TODO: Might be disabled when System Manager is configured
        SecurityGroupIds:
          - !Ref ServerSecurityGroup

  BackendAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: BackendAutoScalingGroup
      DesiredCapacity: 1
      HealthCheckGracePeriod: 2
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref BackendLaunchTemplate
        Version: 1
      MaxSize: 1
      MinSize: 1
      TargetGroupARNs:
        - !Ref ServerTG
      VPCZoneIdentifier:
        - Fn::ImportValue:
            Fn::Sub: "${InfrastructureStackName}-PrivSubnetA"
        - Fn::ImportValue:
            Fn::Sub: "${InfrastructureStackName}-PrivSubnetB"

  FrontendLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: FrontendLaunchTemplate
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: '/dev/sda1'
            Ebs:
              VolumeSize: 8 # in GB
        ImageId: 'ami-089a545a9ed9893b6' # Amazon Linux 2 AMI (64-bit x86)
        InstanceType: 't2.micro'  # freetier
        KeyName: 'Demo-Test-Key-Pair'
        SecurityGroupIds:
          - !Ref ClientSecurityGroup

  FrontendAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: FrontendAutoScalingGroup
      DesiredCapacity: 1
      HealthCheckGracePeriod: 2
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref FrontendLaunchTemplate
        Version: 1
      MaxSize: 1
      MinSize: 1
      TargetGroupARNs:
        - !Ref ClientTG
      VPCZoneIdentifier:
        - Fn::ImportValue:
            Fn::Sub: "${InfrastructureStackName}-PubSubnetA"
        - Fn::ImportValue:
            Fn::Sub: "${InfrastructureStackName}-PubSubnetB"

  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Server security group'
      GroupName: 'ServerSecurityGroup'
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0' # TODO: Might be disabled when System Manager is configured
          IpProtocol: TCP
          FromPort: 22
          ToPort: 22
        - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          IpProtocol: TCP
          FromPort: 8080
          ToPort: 8080
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0' # Not for Prod
          IpProtocol: -1 # Allow all
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${InfrastructureStackName}-VpcId"
      Tags:
        - Key: 'Name'
          Value: 'ServerSecurityGroup'

  ClientSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Client security group'
      GroupName: 'ClientSecurityGroup'
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0' # TODO: Might be disabled when System Manager is configured
          IpProtocol: TCP
          FromPort: 22
          ToPort: 22
        - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          IpProtocol: TCP
          FromPort: 5000
          ToPort: 5000
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: -1 # Allow all
      Tags:
        - Key: 'Name'
          Value: 'ClientSecurityGroup'
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${InfrastructureStackName}-VpcId"

  # ========= RDS Database configuration =========

  DB:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      BackupRetentionPeriod: 0 # default: 1
      CopyTagsToSnapshot: true # default: false
      DBInstanceClass: db.t2.micro
      DBInstanceIdentifier: aiusermanagerdb
      DBName: 'AiUserManagerDB'
      DBSubnetGroupName: 'DBSubnetGroupA'
      Engine: 'mysql'
      EngineVersion: '8.0.27'
      LicenseModel: 'general-public-license'
      MasterUsername: 'admin'
      MasterUserPassword: !Ref DBPass
      MaxAllocatedStorage: 1000
      MultiAZ: true
      PubliclyAccessible: false
      StorageType: gp2
      VPCSecurityGroups:
        - Ref: DBSecurityGroup

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "DBSubnetGroupA for RDS MySql instance"
      DBSubnetGroupName: DBSubnetGroupA
      SubnetIds:
        - Fn::ImportValue:
            Fn::Sub: "${InfrastructureStackName}-PrivSubnetA"
        - Fn::ImportValue:
            Fn::Sub: "${InfrastructureStackName}-PrivSubnetB"

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'DB security group'
      GroupName: 'AiUserManagerDBSg'
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref ServerSecurityGroup
          IpProtocol: TCP
          FromPort: 3306
          ToPort: 3306
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: -1 # Allow all
      Tags:
        - Key: 'Name'
          Value: 'AiUserManagerDBSg'
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${InfrastructureStackName}-VpcId"

# ========= Application Load Balancer configuration =========

  ServerTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckPath: /users
      HealthCheckProtocol: HTTP
      Matcher:
        HttpCode: '200'
      Port: 8080
      Protocol: HTTP
      ProtocolVersion: HTTP1
      Name: ServerTG
      TargetType: instance
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${InfrastructureStackName}-VpcId"

  ClientTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      Matcher:
        HttpCode: '200'
      Port: 5000
      Protocol: HTTP
      ProtocolVersion: HTTP1
      Name: ClientTG
      TargetType: instance
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${InfrastructureStackName}-VpcId"

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'LB security group'
      GroupName: 'LoadBalancerSecurityGroup'
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: TCP
          FromPort: 8080
          ToPort: 8080
        - CidrIp: '0.0.0.0/0'
          IpProtocol: TCP
          FromPort: 5000
          ToPort: 5000
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: -1 # Allow all
      Tags:
        - Key: 'Name'
          Value: 'LoadBalancerSecurityGroup'
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${InfrastructureStackName}-VpcId"


  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: UserManagerLB
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Type: application
      Subnets:
        - Fn::ImportValue:
              Fn::Sub: "${InfrastructureStackName}-PubSubnetA"
        - Fn::ImportValue:
              Fn::Sub: "${InfrastructureStackName}-PubSubnetB"

  LBClientListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref ClientTG
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 5000
      Protocol: "HTTP"

  LBServerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref ServerTG
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 8080
      Protocol: "HTTP"

